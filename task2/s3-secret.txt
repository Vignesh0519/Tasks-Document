AWS CLI Configuration Using IAM Role (No Access Key Needed)

Overview
This document provides a step-by-step guide for configuring the AWS Command Line Interface (CLI) on an EC2 instance, using an IAM role instead of manually entering access keys. The EC2 instance will interact with AWS services such as S3 and Secrets Manager using the IAM role, which will automatically provide the necessary credentials.

Prerequisites
Before proceeding with this guide, ensure that:

An EC2 instance is running.
The EC2 instance has an IAM role attached with the required permissions (e.g., AmazonS3ReadOnlyAccess, SecretsManagerReadWriteAccess, etc.).
The instance has internet access or the necessary VPC endpoints for accessing AWS services.


Step 1: Attach an IAM Role to the EC2 Instance
To ensure your EC2 instance can interact with AWS services using an IAM role, follow these steps:

Create or Attach an IAM Role:

Go to the AWS Management Console.
Navigate to IAM > Roles > Create role.
Choose AWS service > EC2.
Attach policies like AmazonS3ReadOnlyAccess and SecretsManagerReadWriteAccess (adjust based on your requirements).
Assign the role to the EC2 instance during its creation or attach it to an existing instance by selecting Actions > Security > Modify IAM Role.
Verify IAM Role Permissions: Ensure that the IAM role has sufficient permissions to perform tasks like listing and accessing S3 buckets, and interacting with Secrets Manager.

Example of a policy for accessing S3:

json
Copy code
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws:s3:::your-bucket-name"
    },
    {
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::your-bucket-name/*"
    }
  ]
}


Step 2: Install AWS CLI on the EC2 Instance
Follow these steps to install AWS CLI without requiring access keys:

Update the System Package List:

sudo apt-get update
Install Required Dependencies:

sudo apt-get install unzip curl

Download and Install AWS CLI Version 2:

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

Verify Installation: Check if AWS CLI is installed properly:

aws --version
This should return a version like:


Step 3: Verify IAM Role is Being Used Automatically
When you use the AWS CLI on an EC2 instance with an IAM role attached, the CLI automatically retrieves temporary credentials from the Instance Metadata Service (IMDS), so no manual configuration is required.

Check Instance Metadata Access: Run the following command to ensure the instance can access metadata:


Test AWS CLI Commands: Try running AWS CLI commands like the following to verify the IAM role's permissions:

List S3 Buckets:

bash
Copy code
aws s3 ls
List Secrets in Secrets Manager:


aws secretsmanager list-secrets


The IAM role attached to the EC2 instance should provide access without needing to manually enter access keys.

Step 4: Access Secrets Manager Using the IAM Role
If you need to access Secrets Manager, you can use the AWS CLI as follows:

List Secrets:

aws secretsmanager list-secrets
Retrieve a Secret: To retrieve a secret value, use the following command:

aws secretsmanager get-secret-value --secret-id my-secret-id
Replace my-secret-id with the actual secret ID.


Step 5: Troubleshooting
If you encounter issues with access or permissions, consider the following:

Permissions: Ensure the IAM role has the correct permissions for the services you're trying to access.
Instance Metadata Access: Ensure that the EC2 instance is able to access instance metadata. You can test this by running curl http://169.254.169.254/latest/meta-data/iam/info.
Session Expiration: The IAM role grants temporary credentials that expire after a period. If you suspect the credentials are expired, you can simply restart the instance or ensure that the metadata service is accessible.


Conclusion
By following this guide, you have set up AWS CLI on your EC2 instance, using the IAM role to authenticate and access AWS services like S3 and Secrets Manager without needing to manually configure access keys. The IAM role provides temporary, automatic credentials, ensuring that you can securely interact with AWS services.
